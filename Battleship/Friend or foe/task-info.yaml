type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Cell.java
  visible: true
  text: |
    package battleship;

    public class Cell {
        private char symbol;
        public static final char SHIP = 'O';
        public static final char EMPTY = '~';
        public static final char HIT = 'X';
        public static final char MISS = 'M';

        public Cell() {
            this.symbol = EMPTY;
        }

        public void setSymbol(char symbol) {
            this.symbol = symbol;
        }

        public char getSymbol() {
            return symbol;
        }
    }
  learner_created: true
- name: src/battleship/Field.java
  visible: true
  text: |
    package battleship;

    public class Field {
        private final Cell[][] cells = new Cell[10][10];
        private final Cell[][] fogCells = new Cell[10][10];

        public Field() {
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    cells[i][j] = new Cell();
                    fogCells[i][j] = new Cell();
                }
            }
        }

        public int[] translateCoordinate(String coordinate) {
            int row = coordinate.charAt(0) - 'A';
            int column = Integer.parseInt(coordinate.substring(1)) - 1;
            return new int[] { row, column };
        }

        public void placeShip(Ship ship) {
            int[] start = translateCoordinate(ship.getStartCoordinate());
            int[] end = translateCoordinate(ship.getEndCoordinate());

            for (int i = Math.min(start[0], end[0]); i <= Math.max(start[0], end[0]); i++) {
                for (int j = Math.min(start[1], end[1]); j <= Math.max(start[1], end[1]); j++) {
                    cells[i][j].setSymbol(Cell.SHIP);
                }
            }
        }

        public void shooting(String shot){
            int[] target = translateCoordinate(shot);
            if (cells[target[0]][target[1]].getSymbol() == Cell.SHIP){
                cells[target[0]][target[1]].setSymbol(Cell.HIT);
                fogCells[target[0]][target[1]].setSymbol(Cell.HIT);
                //printField(); //print my field
                printFogField();
                System.out.println();
                if (sankAllShip()){
                    System.out.println("You sank the last ship. You won. Congratulations!");
                } else if (sankShip()) {
                    System.out.println("You sank a ship! Specify a new target:");
                } else {
                    System.out.println("You hit a ship! Try again");
                }

            } else if (cells[target[0]][target[1]].getSymbol() == Cell.EMPTY) {
                cells[target[0]][target[1]].setSymbol(Cell.MISS);
                fogCells[target[0]][target[1]].setSymbol(Cell.MISS);
                //printField(); // print my field
                printFogField();
                System.out.println();
                System.out.println("You missed. Try again:");
            } else if (cells[target[0]][target[1]].getSymbol() == Cell.HIT || cells[target[0]][target[1]].getSymbol() == Cell.MISS) {
                printFogField();
                System.out.println();
                System.out.println("You have already tried this. Try again:");
            }
        }

    //    public void getShot(String shot){
    //        int[] target = translateCoordinate(shot);
    //        if (cells[target[0]][target[1]].getSymbol() == Cell.SHIP) {
    //            System.out.println("Take a shot!");
    //        } else {
    //            System.out.println("You missed!");
    //        }
    //    }

        // Prüft, ob die Schiffslänge korrekt ist
        public boolean hasCorrectLength(Ship ship) {
            int[] start = translateCoordinate(ship.getStartCoordinate());
            int[] end = translateCoordinate(ship.getEndCoordinate());
            boolean sameRow = start[0] == end[0];
            boolean sameColumn = start[1] == end[1];

            if (sameRow) {
                return Math.abs(end[1] - start[1]) + 1 == ship.getSize();
            } else if (sameColumn) {
                return Math.abs(end[0] - start[0]) + 1 == ship.getSize();
            }
            return false;
        }

        // Prüft, ob das Schiff entweder horizontal oder vertikal ist, aber nicht diagonal
        public boolean hasValidLocation(Ship ship) {
            int[] start = translateCoordinate(ship.getStartCoordinate());
            int[] end = translateCoordinate(ship.getEndCoordinate());
            return start[0] == end[0] || start[1] == end[1];
        }

        // Prüft, ob das Schiff zu nahe an einem anderen Schiff platziert ist
        public boolean isTooCloseToAnotherShip(Ship ship) {
            int[] start = translateCoordinate(ship.getStartCoordinate());
            int[] end = translateCoordinate(ship.getEndCoordinate());

            // Dynamische Zuweisung von Start und Ende basierend auf ihren Werten
            int startRow = Math.min(start[0], end[0]);
            int endRow = Math.max(start[0], end[0]);
            int startCol = Math.min(start[1], end[1]);
            int endCol = Math.max(start[1], end[1]);

            int startRowCheck = Math.max(0, startRow - 1);
            int endRowCheck = Math.min(9, endRow + 1);
            int startColCheck = Math.max(0, startCol - 1);
            int endColCheck = Math.min(9, endCol + 1);

            for (int i = startRowCheck; i <= endRowCheck; i++) {
                for (int j = startColCheck; j <= endColCheck; j++) {
                    // Überprüfen, ob die Zelle nicht zu dem aktuell platzierten Schiff gehört
                    if (!((i >= startRow && i <= endRow) && (j >= startCol && j <= endCol))) {
                        if (cells[i][j].getSymbol() == Cell.SHIP) {
                            return true;  // Ein Schiff befindet sich zu nahe
                        }
                    }
                }
            }
            return false;
        }

        public void canPlaceShip(Ship ship) {
            if (!hasValidLocation(ship)) {
                System.out.println("Error! Wrong ship location! Try again:");

            }else if (!hasCorrectLength(ship)) {
                System.out.println("Error! Wrong length of the " + ship.getName() + "! Try again:");

            }else if (isTooCloseToAnotherShip(ship)) {
                System.out.println("Error! You placed it too close to another one. Try again:");

            }
        }

        public void printField() {
            System.out.print("  ");
            for (int i = 1; i <= 10; i++) {
                System.out.print(i + " ");
            }
            System.out.println();
            for (int i = 0; i < 10; i++) {
                System.out.print((char) ('A' + i) + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(cells[i][j].getSymbol() + " ");
                }
                System.out.println();
            }
        }

        public void printFogField() {
            System.out.print("  ");
            for (int i = 1; i <= 10; i++) {
                System.out.print(i + " ");
            }
            System.out.println();
            for (int i = 0; i < 10; i++) {
                System.out.print((char) ('A' + i) + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(fogCells[i][j].getSymbol() + " ");
                }
                System.out.println();
            }
        }

        public boolean sankAllShip(){
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    if (cells[i][j].getSymbol() == Cell.SHIP) {
                        return false;  // At least one ship is still floating
                    }
                }
            }
            return true;  // No ships left
        }

        public boolean sankShip(){
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    if (cells[i][j].getSymbol() == Cell.HIT) {
                        // Checking cells around for SHIP symbol
                        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}}; // Up, Down, Left, Right
                        for (int[] direction : directions) {
                            int newRow = i + direction[0];
                            int newCol = j + direction[1];
                            if (newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10 && cells[newRow][newCol].getSymbol() == Cell.SHIP) {
                                return false; // Ship is not fully sunk yet
                            }
                        }
                    }
                }
            }
            return true; // Ship is sunk
        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Game {
        public Scanner scanner = new Scanner(System.in);
        private final Field field;
        public final Field fogField;
        private final List<Ship> ships;

        private boolean skip = true;

        public Game() {
            this.field = new Field();
            this.fogField = new Field();
            this.ships = new ArrayList<>();  // initialize the list
            this.ships.add(new Ship("Aircraft Carrier", 5));
            this.ships.add(new Ship("Battleship", 4));
            this.ships.add(new Ship("Submarine", 3));
            this.ships.add(new Ship("Cruiser", 3));
            this.ships.add(new Ship("Destroyer", 2));
            // rest of the code...
        }

        public void startGame() {
            for (Ship ship : ships) {
                field.printField();
                System.out.println();
                placeShip(ship);
            }
            field.printField();
            System.out.println();
            System.out.println("The game starts!");
            System.out.println();
            //field.printField();
            fogField.printFogField();
            takeAShot();
            //field.printField();

        }

        public void placeShip(Ship ship) {
            while (true) {
                if (skip){
                    System.out.println("Enter the coordinates of the " + ship.getName() + " (" + ship.getSize() + " cells):");
                }
                System.out.println();
                String start = scanner.next();
                String end = scanner.next();
                ship.setStartCoordinate(start);
                ship.setEndCoordinate(end);
                if (validPlacement(ship)) {
                    field.placeShip(ship);
                    skip = true;
                    break;
                } else {
                    System.out.println();
                    field.canPlaceShip(ship);
                    skip = false;
                }
            }
            System.out.println();
        }

        private boolean validPlacement(Ship ship) {
            int[] start = field.translateCoordinate(ship.getStartCoordinate());
            int[] end = field.translateCoordinate(ship.getEndCoordinate());

            if (Math.abs(start[0] - end[0]) + 1 == ship.getSize() || Math.abs(start[1] - end[1]) + 1 == ship.getSize()) {
                return (field.hasCorrectLength(ship) && field.hasValidLocation(ship) && !field.isTooCloseToAnotherShip(ship));
            }
            return false;
        }

        private void takeAShot(){
            while (!field.sankAllShip()){
                System.out.println();
                String shot = scanner.next();
                System.out.println();

                if (isValidShot(shot)){
                    field.shooting(shot);
                } else {
                    System.out.println("Error! You entered the wrong coordinates! Try again:");
                    takeAShot();
                }
            }
        }

        private boolean isValidShot(String shot){
            if (shot.length() < 2 || shot.length() > 3) {
                return false;
            }

            char row = shot.charAt(0);
            String columnStr = shot.substring(1);
            int column;

            if (row < 'A' || row > 'J') {
                return false;
            }

            try {
                column = Integer.parseInt(columnStr);
                if (column < 1 || column > 10) {
                    return false;
                }
            } catch (NumberFormatException e) {
                return false;
            }

            return true;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public class Ship {
        private final String name;
        private final int size;
        private String startCoordinate;
        private String endCoordinate;

        public Ship(String name, int size) {
            this.name = name;
            this.size = size;
        }

        public String getName() {
            return name;
        }

        public int getSize() {
            return size;
        }

        public String getStartCoordinate() {
            return startCoordinate;
        }

        public void setStartCoordinate(String startCoordinate) {
            this.startCoordinate = startCoordinate;
        }

        public String getEndCoordinate() {
            return endCoordinate;
        }

        public void setEndCoordinate(String endCoordinate) {
            this.endCoordinate = endCoordinate;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Mon, 21 Aug 2023 12:21:39 UTC"
record: -1
